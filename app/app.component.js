"use strict";
var core_1 = require("@angular/core");
var nativescript_couchbaselite_1 = require("nativescript-couchbaselite");
var class_transformer_1 = require("class-transformer");
var Group = (function () {
    function Group() {
    }
    return Group;
}());
var User = (function () {
    function User() {
        this.docType = "USER";
        this.secure = false;
        this.group = new Group;
    }
    Object.defineProperty(User.prototype, "registerAtDate", {
        get: function () {
            return this.registerAt ? new Date(this.registerAt) : null;
        },
        set: function (d) {
            this.registerAt = d.getTime();
        },
        enumerable: true,
        configurable: true
    });
    User.prototype.getName = function () {
        return this.name;
    };
    return User;
}());
__decorate([
    class_transformer_1.Type(function () { return Group; }),
    __metadata("design:type", Group)
], User.prototype, "group", void 0);
var AppComponent = (function () {
    function AppComponent() {
    }
    AppComponent.prototype.ngOnInit = function () {
        var dbTest = nativescript_couchbaselite_1.DatabaseManager.getOrCreate({ name: "test", create: true });
        var mapping = new Map();
        mapping.set("USER", User);
        dbTest.setMapping(mapping);
        console.log("BEFORE LIVE0.....");
        dbTest.createView({
            name: "users_live",
            revision: "2",
            map: function (doc, emitter) {
                console.log("EMIT.....", doc["_id"]);
                emitter.emit(doc["_id"], null);
            }
        });
        var l = {
            last: [],
            count: 0,
            onRows: function (rows) {
                console.log("ROWS......", rows);
                l.last = rows.getDocumentsId();
                l.count++;
            }
        };
        for (var i = 0; i < 6; i++) {
            var user = new User();
            user.name = "user" + i;
            user.registerAtDate = new Date();
            user.group.name = "group" + i;
            dbTest.createDocument(user, "ID" + i);
        }
        console.log("BEFORE LIVE.....");
        var live = dbTest.liveQuery("users_live", { mapOnly: true }, l);
        live.start();
        live.waitForRows();
        console.log("BEFORE START.....");
        setTimeout(function () {
            console.log("Should emit.....", l);
            for (var i = 6; i < 12; i++) {
                var user = new User();
                user.name = "user" + i;
                user.registerAtDate = new Date();
                user.group.name = "group" + i;
                dbTest.createDocument(user, "ID" + i);
            }
        }, 3000);
    };
    return AppComponent;
}());
AppComponent = __decorate([
    core_1.Component({
        selector: "ns-app",
        templateUrl: "app.component.html",
    })
], AppComponent);
exports.AppComponent = AppComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNDQUFrRDtBQUNsRCx5RUFHb0M7QUFDcEMsdURBQXlDO0FBRXpDO0lBQUE7SUFFQSxDQUFDO0lBQUQsWUFBQztBQUFELENBQUMsQUFGRCxJQUVDO0FBQ0Q7SUFBQTtRQUdJLFlBQU8sR0FBVyxNQUFNLENBQUM7UUFHekIsV0FBTSxHQUFZLEtBQUssQ0FBQztRQU9MLFVBQUssR0FBVSxJQUFJLEtBQUssQ0FBQztJQUloRCxDQUFDO0lBVkcsc0JBQUksZ0NBQWM7YUFHbEI7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzlELENBQUM7YUFMRCxVQUFtQixDQUFPO1lBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2xDLENBQUM7OztPQUFBO0lBS0Qsc0JBQU8sR0FBUDtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFDTCxXQUFDO0FBQUQsQ0FBQyxBQWpCRCxJQWlCQztBQUpzQjtJQUFsQix3QkFBSSxDQUFDLGNBQU0sT0FBQSxLQUFLLEVBQUwsQ0FBSyxDQUFDOzhCQUFRLEtBQUs7bUNBQWE7QUFTaEQsSUFBYSxZQUFZO0lBQXpCO0lBZ0RBLENBQUM7SUEvQ0csK0JBQVEsR0FBUjtRQUNJLElBQUksTUFBTSxHQUFHLDRDQUFlLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN6RSxJQUFJLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBZSxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FB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WyJpbXBvcnQgeyBPbkluaXQsIENvbXBvbmVudCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge1xuICAgIFF1ZXJ5UmVzdWx0LCBMaXZlUXVlcnksIFF1ZXJ5TGlzdGVuZXIsIFJldmlzaW9uLFxuICAgIERhdGFiYXNlTWFuYWdlciwgRG9jdW1lbnQsIERhdGFiYXNlLCBBdHRhY2htZW50RmFjdG9yeSwgRW1pdHRlciwgQXR0YWNobWVudEltYWdlXG59IGZyb20gJ25hdGl2ZXNjcmlwdC1jb3VjaGJhc2VsaXRlJztcbmltcG9ydCB7IFR5cGUgfSBmcm9tIFwiY2xhc3MtdHJhbnNmb3JtZXJcIjtcblxuY2xhc3MgR3JvdXAge1xuICAgIG5hbWU6IHN0cmluZztcbn1cbmNsYXNzIFVzZXIgaW1wbGVtZW50cyBEb2N1bWVudCB7XG4gICAgZG9jSWQ6IHN0cmluZztcbiAgICBkb2NSZXY6IHN0cmluZztcbiAgICBkb2NUeXBlOiBzdHJpbmcgPSBcIlVTRVJcIjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcmVnaXN0ZXJBdDogbnVtYmVyO1xuICAgIHNlY3VyZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHNldCByZWdpc3RlckF0RGF0ZShkOiBEYXRlKSB7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJBdCA9IGQuZ2V0VGltZSgpO1xuICAgIH1cbiAgICBnZXQgcmVnaXN0ZXJBdERhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyQXQgPyBuZXcgRGF0ZSh0aGlzLnJlZ2lzdGVyQXQpIDogbnVsbDtcbiAgICB9XG4gICAgQFR5cGUoKCkgPT4gR3JvdXApIGdyb3VwOiBHcm91cCA9IG5ldyBHcm91cDtcbiAgICBnZXROYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cbn1cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIm5zLWFwcFwiLFxuICAgIHRlbXBsYXRlVXJsOiBcImFwcC5jb21wb25lbnQuaHRtbFwiLFxufSlcbmV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBsZXQgZGJUZXN0ID0gRGF0YWJhc2VNYW5hZ2VyLmdldE9yQ3JlYXRlKHsgbmFtZTogXCJ0ZXN0XCIsIGNyZWF0ZTogdHJ1ZSB9KTtcbiAgICAgICAgbGV0IG1hcHBpbmcgPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xuICAgICAgICBtYXBwaW5nLnNldChcIlVTRVJcIiwgVXNlcik7XG4gICAgICAgIGRiVGVzdC5zZXRNYXBwaW5nKG1hcHBpbmcpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkJFRk9SRSBMSVZFMC4uLi4uXCIpXG4gICAgICAgIGRiVGVzdC5jcmVhdGVWaWV3KHtcbiAgICAgICAgICAgIG5hbWU6IFwidXNlcnNfbGl2ZVwiLFxuICAgICAgICAgICAgcmV2aXNpb246IFwiMlwiLFxuICAgICAgICAgICAgbWFwOiAoZG9jOiBEb2N1bWVudCwgZW1pdHRlcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRU1JVC4uLi4uXCIsIGRvY1tcIl9pZFwiXSk7XG4gICAgICAgICAgICAgICAgZW1pdHRlci5lbWl0KGRvY1tcIl9pZFwiXSwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgbCA9IHtcbiAgICAgICAgICAgIGxhc3Q6IFtdLFxuICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICBvblJvd3Mocm93czogUXVlcnlSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJPV1MuLi4uLi5cIiwgcm93cyk7XG4gICAgICAgICAgICAgICAgbC5sYXN0ID0gcm93cy5nZXREb2N1bWVudHNJZCgpO1xuICAgICAgICAgICAgICAgIGwuY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgICAgICAgIGxldCB1c2VyID0gbmV3IFVzZXIoKTtcbiAgICAgICAgICAgIHVzZXIubmFtZSA9IFwidXNlclwiICsgaTtcbiAgICAgICAgICAgIHVzZXIucmVnaXN0ZXJBdERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgdXNlci5ncm91cC5uYW1lID0gXCJncm91cFwiICsgaTtcbiAgICAgICAgICAgIGRiVGVzdC5jcmVhdGVEb2N1bWVudCh1c2VyLCBcIklEXCIgKyBpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhcIkJFRk9SRSBMSVZFLi4uLi5cIilcbiAgICAgICAgbGV0IGxpdmUgPSBkYlRlc3QubGl2ZVF1ZXJ5KFwidXNlcnNfbGl2ZVwiLCB7IG1hcE9ubHk6IHRydWUgfSwgbCk7XG4gICAgICAgIGxpdmUuc3RhcnQoKTtcbiAgICAgICAgbGl2ZS53YWl0Rm9yUm93cygpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkJFRk9SRSBTVEFSVC4uLi4uXCIpXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTaG91bGQgZW1pdC4uLi4uXCIsIGwpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDY7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHVzZXIgPSBuZXcgVXNlcigpO1xuICAgICAgICAgICAgICAgIHVzZXIubmFtZSA9IFwidXNlclwiICsgaTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB1c2VyLnJlZ2lzdGVyQXREYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICB1c2VyLmdyb3VwLm5hbWUgPSBcImdyb3VwXCIgKyBpO1xuICAgICAgICAgICAgICAgIGRiVGVzdC5jcmVhdGVEb2N1bWVudCh1c2VyLCBcIklEXCIgKyBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMzAwMClcbiAgICB9XG59XG4iXX0=